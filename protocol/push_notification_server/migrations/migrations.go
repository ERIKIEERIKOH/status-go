// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 1593601728_initial_schema.down.sql (200B)
// 1593601728_initial_schema.up.sql (517B)
// doc.go (380B)
// migrations.go (11.273kB)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1593601728_initial_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x28\x2d\xce\x88\xcf\xcb\x2f\xc9\x4c\xcb\x4c\x4e\x2c\xc9\xcc\xcf\x8b\x2f\x4e\x2d\x2a\x4b\x2d\x8a\x2f\x4a\x4d\xcf\x2c\x2e\x29\x02\x8b\x15\x5b\x73\x81\xb5\x78\xfa\xb9\xb8\x46\x28\x64\xa6\x54\xc4\x13\xa7\x2d\xbe\xa0\x34\x29\x27\x33\x39\x3e\x3b\xb5\x92\x72\x13\xe2\x33\xf3\x8a\x4b\x12\x73\x72\x20\x8a\x33\x53\xac\xb9\xb8\x00\x01\x00\x00\xff\xff\x90\x39\xe0\x1c\xc8\x00\x00\x00")

func _1593601728_initial_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1593601728_initial_schemaDownSql,
		"1593601728_initial_schema.down.sql",
	)
}

func _1593601728_initial_schemaDownSql() (*asset, error) {
	bytes, err := _1593601728_initial_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1593601728_initial_schema.down.sql", size: 200, mode: os.FileMode(0644), modTime: time.Unix(1593602231, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x88, 0x8a, 0x61, 0x81, 0x57, 0x45, 0x9b, 0x97, 0x9b, 0x1f, 0xf6, 0x94, 0x8a, 0x20, 0xb3, 0x2b, 0xff, 0x69, 0x49, 0xf4, 0x58, 0xcc, 0xd0, 0x55, 0xcc, 0x9a, 0x8b, 0xb6, 0x7f, 0x29, 0x53, 0xc1}}
	return a, nil
}

var __1593601728_initial_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xc1\x4a\x03\x31\x14\x45\xf7\xf9\x8a\xbb\xec\x40\xff\x60\x56\x99\x98\x62\x20\xbc\xe8\x34\x23\xdd\x85\xda\x46\x7d\x38\xcc\x94\x24\x2d\xfa\xf7\xe2\x28\x38\xad\x9b\x22\x6e\x2f\x8f\x7b\xde\x3d\xaa\xd5\xd2\x6b\x78\xd9\x58\x0d\xb3\x02\x39\x0f\xbd\x31\x6b\xbf\xc6\xe1\x98\x5f\xc2\x30\x16\x7e\xe2\xdd\xb6\xf0\x38\x84\x1c\xd3\x29\xa6\x90\xe2\x33\xe7\x92\xa6\x2c\x63\x21\x80\xc3\xf1\xb1\xe7\x5d\x78\x8d\xef\x68\xac\x6b\xa6\x16\xea\xac\x5d\x0a\x80\x87\x5c\xb6\x7d\xff\xd5\xc0\x7b\x3c\xc8\x56\xdd\xca\xf6\xec\xe6\x14\x53\xe6\x71\x80\x21\x7f\x96\xcf\x49\x53\xf3\x67\xd8\x91\xb9\xef\xf4\xe2\x87\xb9\xbc\x64\x54\x70\x04\xe5\x68\x65\x8d\xf2\x68\xf5\x9d\x95\x4a\x8b\xaa\x16\xe2\x7b\xae\xa1\x1b\xbd\x01\xef\xdf\xc2\x75\x23\xc3\x6c\xa0\xa3\x2b\xcd\xcc\x3e\xac\xea\x7f\x20\x87\x4b\x93\x7f\xf9\xe4\xb7\xab\x5a\x88\x8f\x00\x00\x00\xff\xff\x5c\xf8\x30\xd8\x05\x02\x00\x00")

func _1593601728_initial_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1593601728_initial_schemaUpSql,
		"1593601728_initial_schema.up.sql",
	)
}

func _1593601728_initial_schemaUpSql() (*asset, error) {
	bytes, err := _1593601728_initial_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1593601728_initial_schema.up.sql", size: 517, mode: os.FileMode(0644), modTime: time.Unix(1593604147, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf1, 0x55, 0xab, 0xbf, 0xee, 0x66, 0xe9, 0x81, 0x9f, 0x89, 0xca, 0x6b, 0xf8, 0x1d, 0x12, 0x59, 0xf6, 0x1e, 0xac, 0x79, 0x93, 0x8f, 0x47, 0xbd, 0x76, 0x65, 0xbb, 0x10, 0x99, 0x8a, 0xda, 0x9e}}
	return a, nil
}

var _docGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\x3d\x6e\xec\x30\x0c\x84\x7b\x9d\x62\xb0\xcd\x36\xcf\x52\xf3\xaa\x74\x29\xd3\xe7\x02\x5c\x89\x96\x88\xb5\x24\x43\xa4\xf7\xe7\xf6\x81\x37\x01\xe2\x2e\x25\x07\xf3\x0d\x67\x42\xc0\x67\x11\xc5\x2c\x0b\x43\x14\x8d\x23\xab\xd2\x78\xe2\xc2\x91\x36\x65\x9c\xb2\x58\xd9\x2e\x3e\xf6\x1a\xd4\xc8\x36\x9d\xa4\x86\x2a\x79\x90\x71\xb8\xfd\x3f\xb9\x10\x10\xa9\x9d\x0d\x85\x5a\x5a\xf8\x95\xa5\x50\xa3\x61\xd2\x32\xee\x62\x05\x84\x75\xf0\x2c\x0f\x8f\x77\xc3\xc2\xa4\x06\x2b\x64\x67\x85\x15\x46\x24\xe5\x3d\x66\xee\x03\xb9\x4f\x17\x69\x89\x8c\xfc\x2e\x7d\xcc\x07\x65\x6f\x18\x69\x59\x38\x61\x1e\xbd\xbe\x58\xa5\xca\x48\x32\x38\x5a\x1f\xcf\x7f\x20\x55\x36\x34\xaa\xac\x3b\x5f\xe8\xc6\x68\xfd\xe7\x3d\xa8\xa5\xbf\x17\xe1\xde\xc7\x55\x41\x0a\x7e\xac\x1c\x8d\x93\x77\x6e\xa5\x78\xa5\xcc\xf8\xf6\x49\x6f\xea\x5c\x08\xb9\xbf\x65\x6e\xbc\x93\xc7\x9e\xd3\x7a\xcd\x07\x27\xa6\x0e\x1f\x7e\x6f\x9f\x3b\xbc\xfb\x0a\x00\x00\xff\xff\x16\xe7\xa6\x91\x7c\x01\x00\x00")

func docGoBytes() ([]byte, error) {
	return bindataRead(
		_docGo,
		"doc.go",
	)
}

func docGo() (*asset, error) {
	bytes, err := docGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "doc.go", size: 380, mode: os.FileMode(0644), modTime: time.Unix(1593602500, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc9, 0x2a, 0xc5, 0xd7, 0x2b, 0x57, 0xb6, 0x67, 0x4, 0x1a, 0x78, 0x2f, 0x85, 0xd3, 0x1c, 0xba, 0xf3, 0xc7, 0x8e, 0xb4, 0xd3, 0x5a, 0x70, 0x5, 0xe5, 0x69, 0xd, 0x97, 0x88, 0x80, 0x6e, 0xb6}}
	return a, nil
}

var _migrationsGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x5d\x6f\xe3\xb8\x7a\xbe\xb6\x7e\x05\x6b\x60\xb7\xf6\x39\x3e\x8e\x64\x5b\xb2\x9c\x22\x17\x67\x67\x76\x8b\x2d\xba\x73\x8a\xfd\x40\x2f\x86\x83\x01\x25\x51\x09\x31\xb2\xe4\x95\xe4\x09\x33\x81\xff\x7b\xf1\xbc\x2f\x65\xcb\xf9\x70\xbc\xd9\x69\xd1\x13\xc0\x8a\x45\x91\xef\x37\x9f\x87\xa4\x75\x71\x21\xde\x54\x99\x16\xd7\xba\xd4\xb5\x6a\x75\x26\x92\x3b\x71\x5d\xfd\x2d\x31\x65\xa6\x5a\x35\x15\x6f\xff\x21\xde\xfd\xe3\x57\xf1\xfd\xdb\x1f\x7f\x9d\x7a\x17\x17\xa2\xa9\xb6\x75\xaa\x9b\x4b\x7c\x0f\xc2\xd5\x3c\xf2\x83\xe5\x2c\xfe\x68\x4a\xd3\x1a\x55\x7c\x6c\xd2\x1b\xbd\x56\xd3\xac\xba\x2d\xa7\xcd\xef\x85\x18\xcd\x7c\xff\xbb\xf1\xe9\xce\xdb\x0d\x77\x0d\xfd\x39\x77\xcd\xaa\x74\x7a\x5d\x89\xd1\x3c\xc6\x58\x6f\xa3\xd2\x4f\xea\x5a\x8b\xb5\xb9\xae\x55\x6b\xaa\xb2\xf1\x3c\xb3\xde\x54\x75\x2b\x46\xde\x60\x98\xdc\xb5\xba\x19\x7a\x83\x61\x5a\xad\x37\xb5\x6e\x9a\x8b\xeb\x2f\x66\x43\x0d\xf5\xdd\xa6\xad\x2e\x9a\x1b\x35\x0b\x23\x34\xe4\xeb\x16\xff\x4c\xc5\xd7\x0b\x53\x6d\x5b\x53\xe0\xa6\x22\x09\x1b\xd5\xde\x5c\xe4\xa6\xd0\xf8\x82\x86\xa6\xad\x4d\x79\x4d\xcf\x5a\xb3\xd6\x43\x6f\xec\x79\xf9\xb6\x4c\x85\x8b\xcf\xcf\x5a\x65\x23\x7c\x11\xef\x3f\xc0\x8e\x89\x28\xd5\x5a\x0b\x1e\x36\x16\xa3\xae\x55\xd7\x75\x55\x8f\xc5\xbd\x37\xb8\xfe\x42\x77\xe2\xf2\x4a\xc0\xcc\xe9\x3b\x7d\x0b\x21\xba\x1e\x91\x1f\xb8\xff\x6e\x9b\xe7\xba\x26\xb1\xe3\xb1\x37\x30\x39\x0d\xf8\x97\x2b\x51\x9a\x02\x22\x06\xb5\x6e\xb7\x75\x89\xdb\x89\xc8\xd7\xed\xf4\x7b\x48\xcf\x47\xc3\x5a\xab\x4c\x7c\xf3\xfb\xa5\xf8\xe6\xf3\x90\x2d\x21\x5d\x63\x6f\xb0\xf3\xbc\xc1\x67\x55\x8b\x64\x9b\x0b\xd6\xc3\x4a\xbc\xc1\x47\x36\xe7\x4a\x98\x6a\xfa\xa6\xda\xdc\x8d\xbe\x4d\xb6\xf9\x44\x5c\x7f\x19\x7b\x83\xb4\xf8\xbe\xb3\x74\xfa\xa6\xa8\x1a\x3d\x1a\x7b\x5f\xcb\x1e\x88\x61\xf9\xcf\x08\xd2\x75\xcd\x76\xbb\xc6\x64\x9b\x4f\xbf\x83\xe9\xa3\xf1\x04\x3d\xbc\x9d\xe7\xb5\x77\x1b\x2d\x54\xd3\xe8\x16\x21\xdf\xa6\x2d\xa4\x90\x7f\xc2\x25\xc4\x1b\x98\x32\xaf\x84\x10\x55\x33\xfd\xc1\x14\xfa\xc7\x32\xaf\xbc\x41\x66\xae\x75\xd3\x8a\xf7\x5c\x19\xd3\x5f\xcc\x17\xcd\xbd\x3b\x99\x2e\xbd\xdd\x88\x9e\x74\xca\xaf\x10\x2e\xc5\xde\xa0\x31\x5f\xe8\xde\x94\x6d\xb4\xf0\x06\x6b\x4c\xa6\x83\xba\x9f\xaa\x4c\x53\xe3\xaf\x66\xad\x05\x4a\x68\x8a\x6f\xd0\x43\x65\x34\xca\xcd\x43\x5d\x63\xf1\x4e\xad\xf5\x68\xec\x34\x40\xa7\x8b\x40\x6e\xa6\xd0\xee\xed\x4e\x8c\x85\x2b\xa3\x31\x5b\x73\x3c\x14\x86\x9e\x1c\x0a\x5b\x47\xe3\xbe\xe5\xc7\x02\xe0\xda\x4b\x02\xe0\xdc\x68\x7c\x70\xf4\x91\x04\xe7\xfd\xf3\x42\x7e\x6c\xde\x9a\x7a\x34\x16\x49\x55\x15\xfd\xd1\xaa\x68\x5e\xf0\xfc\xae\x61\xc7\x75\x9d\xab\x54\xdf\xef\x7a\xa3\x5d\xb9\x60\x06\x7c\xfc\xf8\x2c\x10\xbd\xad\x6e\xcb\x5f\x7e\x2f\xc4\x95\xab\x9d\xd1\x50\xda\x20\x97\x36\x4e\xa4\xf5\x63\x69\x7d\xff\xe9\x4f\x9e\x4b\xbb\x9c\x49\xeb\xaf\xa4\xcd\xf1\x3f\x97\x36\xf4\x79\xcc\x32\x90\x76\xb9\xe0\x76\x7c\x0f\x43\x69\x67\xb1\xfb\x64\xd2\xa6\x5a\xda\x38\x96\x36\xcd\xa5\x4d\x13\x69\x67\xf8\xbf\x92\x76\x91\xf2\x3d\xfe\x2f\xb4\xb4\xb3\x94\xdb\xd3\x94\xfb\xc6\xae\x2f\x3d\xcb\xa4\x9d\x29\x69\x17\x09\x7f\x8f\x95\x7b\x86\xb6\x8c\xfb\x63\xfc\x0c\x7d\x57\xd2\xfa\x33\x1e\x1f\x84\xd2\x86\x89\xb4\xcb\xb9\xb4\x71\x20\x6d\x12\x4a\xbb\x8c\xa5\xcd\x95\xb4\xc9\x4a\xda\x24\x96\x76\x11\xb1\xad\xd1\x42\x5a\x15\x49\x1b\x2e\xa4\x4d\x17\xd2\x06\x73\x69\xd5\x92\xf5\x25\x5a\x5a\xe5\x4b\x3b\x5f\xb0\xfc\xd9\x52\xda\xf9\x5c\xda\xf9\x4a\xda\xb9\x96\x76\x9e\xb0\xec\xd5\x8c\xe3\x84\xb1\x7a\xc6\x7d\xf2\x39\xdb\x0b\xdb\x83\x19\xdb\x82\x3e\x33\x9f\xdb\xd1\x27\x84\xae\xf4\x60\x13\xc5\x3d\x38\x8e\x3f\x3e\x2b\x9f\x75\x6a\x5f\xda\x00\x71\x3a\xca\xd9\xb0\x83\xee\x17\x0b\xc0\xa1\xcc\x53\xe8\xdd\x61\x51\x0f\xfd\xbd\xc1\xe0\xe5\x9a\x9a\x78\x83\xc1\xf0\x65\xba\x1c\x4e\xbc\xc1\x78\x0f\x0e\x2f\x4a\x85\x8d\x7f\x21\xf8\xeb\xdb\x48\xf8\xb7\x27\x99\x73\xbd\x7d\x09\xd7\xf7\x70\x4c\x78\x7a\x79\xf5\x70\x02\xde\x03\x9a\x2e\xc5\x59\x4e\x0a\x60\xd1\xa5\x98\xf9\xfe\x44\x00\x55\x2e\xfb\xa0\x33\xf2\xa3\xc5\x62\x4c\x0f\x00\x16\x97\x0c\x26\xbf\x95\xc6\x8e\x58\xf6\x6c\x36\x0f\x26\xc2\x1f\xef\xbc\x81\x82\x21\xdf\x52\x04\xee\xc9\xed\x4b\xe1\xbc\x87\x95\x97\x74\x9d\x08\x46\xfb\x4b\xf1\x7e\x3e\xfb\xb0\x35\x65\x1b\xdf\xfb\x36\x8e\x27\xc2\xb7\xb1\xc2\x35\x0a\xe8\x3b\x5d\xc3\x25\xae\x8b\x10\xd7\x55\x42\xd7\xe5\xe1\x7b\x90\xe3\x9a\x47\xd4\xb2\x38\x48\x98\xf9\xb8\x26\x73\xfa\x4e\x3d\x73\xea\x19\xad\x48\x1a\x5d\x73\xea\x1f\x92\xde\x34\xc5\x35\xa3\x51\x61\x78\x68\x59\x91\xb4\x98\x24\x24\xa4\x65\x49\x72\x66\x24\x21\x24\xf9\x69\xb0\xdb\xed\x0b\x51\x4d\xce\xc4\xb6\xdf\x36\xaf\x45\x36\xcc\x3c\xcc\xac\x2c\x60\x44\x49\x31\xb3\x31\xc3\x62\x69\xe3\x50\x5a\x9d\xf3\x2c\x0e\x16\xd2\xea\x25\xcf\x5e\xb4\x27\x99\xb4\x8b\x40\x5a\x95\x4b\x9b\x61\xd6\x03\x0d\x02\x1e\x87\x19\x0d\x34\x53\x33\x69\xa3\x54\xda\x70\x29\x6d\x14\x48\x1b\x69\x69\x43\x20\xa6\x43\x2c\x0d\x24\x8c\x79\x3c\xf5\xcd\x19\xd9\xc2\x48\xda\x14\x88\x15\x49\x9b\x69\xd6\x9d\x61\xe6\x67\xd2\xea\xc0\xd9\x91\x3a\x64\x80\xde\x88\x91\x6c\xe9\x4b\x3b\x4b\xa4\x8d\x7c\x69\x97\xd0\x1f\x4a\xeb\xc3\xee\x85\xb4\xf3\x90\x91\x3a\x02\x9a\xc2\x86\x88\x7d\x89\x80\x5e\x40\x34\xa0\xf9\x92\x6d\xca\x42\xf6\x11\x72\xb3\x39\xa3\x54\x90\x31\xf2\xaf\xf0\x5c\x31\x0a\x01\xf1\xe2\x9c\x63\x81\xff\x40\x60\xa0\x6b\xb0\xe4\x58\x02\xad\x7c\xf8\x0c\x64\x9f\x31\xe2\xf9\xce\x7e\x0d\x54\x85\x8d\x88\x21\x50\x31\x71\x71\x46\x4e\x62\x46\xe2\x10\x3a\x33\x46\x61\xc8\xa5\x78\xaf\xd8\x17\x7f\xce\xc8\xad\x16\x1c\x8b\x28\x96\x76\xa5\x38\x5f\x7e\x24\xed\x5c\x71\xac\x56\xf8\x24\xd2\xa6\x4e\xd6\x7c\x29\xed\x6a\xce\x6d\x88\x6d\x0a\x5b\x5d\x5c\x62\xd4\xc1\x82\x63\xd3\xf9\xb6\x40\x8e\x1c\x92\x23\x8f\x60\x10\xe4\x09\x31\x0d\x9c\x3c\xd8\x9e\xa5\x0e\xd1\x33\xce\x5f\xe2\xfa\xe4\x60\x86\x94\xfd\x49\x7c\x97\x67\xe4\x04\x36\x2f\x99\x59\xa0\x93\x6a\x04\xec\xba\x64\xdb\x11\xd3\x04\xb9\x44\xad\xcd\x59\x3e\x7c\x0c\x51\x2b\x19\xc7\x38\x51\x5c\x6f\xcb\x8c\x6b\x6e\xb5\xe0\x76\xb0\x0b\xc6\x12\xa3\x24\x8e\xc1\x53\x66\xe9\x6c\xc9\x6c\x84\xfa\xcc\x62\xb6\xe1\xe1\x9c\xc0\x07\x75\x81\x7a\x59\x3a\x1d\xf9\xb2\xcf\x4a\x67\xb0\x0d\x4d\xc9\xaf\xc9\x35\x24\xf0\x05\xa6\xe1\xbd\xd6\xb9\x3c\x43\x12\xff\x1c\xcb\xf4\xbd\xfc\xdf\xe7\x98\xce\x3d\xc7\x30\xa1\x3f\x7f\x15\xc3\x04\x04\xb8\x7f\x8e\x61\x52\x42\xee\x94\x10\x7d\xce\x58\x3e\xeb\x5d\x89\x0d\x22\x42\x7a\x4d\xd8\xcf\xfd\x33\x62\x1b\x4d\x7d\x34\x31\x52\xbe\x3c\xb0\x81\x22\xae\x58\xd2\xa8\x88\x24\x2b\xe6\x90\x8c\x24\xcc\x7a\xfd\xe9\x29\x3d\x8c\xe8\xaa\xb9\x0b\xd3\x18\x0f\xa5\x96\x98\x69\x29\x38\x88\x8c\x4f\x10\x4c\x56\xa5\xff\x5e\xbd\x8a\x46\xe2\x05\xc3\x05\xa6\x3f\x60\x1e\xd3\x1b\x34\xe2\xa7\xfc\x0c\x10\xb1\xca\x78\x8a\x03\x06\x00\x47\x80\x57\x2c\x5e\x31\xa5\x01\x2f\x4a\xf1\x94\xc3\x22\x13\xb0\x0b\x98\xc4\x62\x36\x84\x8c\x95\xb4\xab\x88\x17\xd3\x58\x6c\xce\x16\x0c\x4b\x80\x3f\x4c\x4d\xf4\xcd\x23\x5e\xe8\xce\xdd\x54\xc5\x22\x94\x16\xc5\x21\xc3\x0a\x74\x00\x02\x31\xe5\x17\x33\x69\x53\x9f\xbf\x07\x81\xb4\x69\xc8\x94\xe4\x27\x2c\x17\x94\x13\x03\x7a\xa1\x23\x61\x8a\x02\xf4\x41\x26\xa0\x1c\xb0\x0a\xfb\x23\x07\x6f\x09\xec\x8c\x99\xa6\xa0\x13\x0b\x63\xd8\x13\x28\x86\x37\x2c\x56\xd1\x1f\x31\x80\xcd\x71\xc4\x8b\x7a\xd0\x14\xe8\x17\x9b\x07\x2c\x7e\x73\xc4\x25\x67\xe8\x0a\x7c\xfe\x00\xf2\x57\x0e\xbe\x41\x4b\xa1\xe2\x4f\x0e\xc8\x0f\x99\xe6\xb0\x21\x01\x8d\x80\x66\x61\xeb\x7c\xc6\x14\x43\x90\x1a\xba\x1c\x84\xd2\xe6\xbe\xf3\x33\xe7\x7c\x81\xf2\x40\xf9\xf0\x09\x76\x81\x3a\x88\x42\x17\x1c\x1b\xe8\xc3\x46\x82\x36\x0a\x80\xed\xd0\xe5\x38\x62\xf9\xa0\x21\xd8\xba\xc8\x19\x7a\xa3\x15\xe7\x2a\x06\xdc\xba\x4d\x09\xe0\x19\x1b\x1b\xe4\x00\xf1\x02\x7d\x00\x52\xd1\x17\xd4\x08\xea\x85\xdd\x81\x76\xb0\xaf\x39\x96\xf0\x2b\x55\xbc\x44\x80\x3f\xe8\x07\xbf\x51\x93\xa8\x1b\x5a\x46\xf8\xbc\xe9\x42\x6c\xb1\x41\x41\x0d\x61\x49\x83\x4d\x49\x08\x0a\xc2\xe6\x2b\x62\xea\x40\x6c\x51\x27\xb0\x5f\x39\xf9\x89\xb3\x1b\x54\xd9\xd1\x21\xe4\x81\x6a\x7d\xe4\x47\xb3\x3c\x6c\x38\x50\x0f\xa0\x4e\xc4\x0c\x35\xae\xdc\x86\x8a\xec\x4c\x39\x1f\xc8\x39\x28\x93\x28\x52\x71\xed\x62\xee\x10\x15\xe5\xce\x7f\xf8\x99\xb2\x2c\xe8\x5b\x69\xae\x77\x50\x0d\xd1\xf4\x92\x37\x59\xd8\x90\x61\xf9\x00\x7f\x61\x07\x64\xae\x72\xb7\xe1\x82\xbe\x84\x6d\x7c\x48\x5d\x41\xc4\x7e\x62\x3c\xea\x14\xd4\xf7\x04\x75\xd1\x64\xff\xe3\x04\x45\xc3\x88\x86\xf8\x1c\xef\x98\x6c\xe8\xe9\x39\x94\xd2\xd7\xfe\xb5\x88\xa3\x33\xc8\xd1\xc3\x3c\x7e\xdd\x06\x24\xc4\xc6\xe5\xcf\xd2\x03\x2d\xe9\x67\x84\xb8\x69\x78\x80\x7e\xde\x3e\x84\x3d\xd0\x8f\x78\x4b\x72\x00\xee\x25\xed\x21\x66\xc4\x17\x31\x0f\xa5\x9d\x41\x90\x1e\x90\x3f\xe7\xbd\x02\x0d\x8d\x35\xb5\x2f\x0e\x3d\x43\x96\xc3\xdc\x41\xec\x10\x1e\xb6\x2b\xd9\x61\xd7\xe3\x76\x49\x4c\x23\x2c\x25\x7a\x92\x1c\x2e\x2e\xc4\xdf\xe9\x18\xae\xa8\x54\xd6\x08\x55\x66\x82\xfb\x34\xa2\xbd\xe9\x8e\xe8\xf2\xaa\xa6\xbb\x6b\xf3\x59\x97\x74\x1c\x48\x27\xca\x3f\xb6\xfb\xbe\xaa\xe4\x72\x10\x26\xef\x8d\x4b\xab\x6d\x91\x89\xb2\x6a\x45\xa2\x45\x5e\x6d\xcb\x4c\x54\x35\x46\x1e\x3d\x80\x66\x9d\x4d\xb9\xca\xc8\x98\xd1\x4b\x67\xb1\xa9\x2a\xab\xd2\xa4\xaa\x78\x87\x8e\x97\x57\xae\x6f\x33\xfd\x59\x6f\x0a\x95\xea\x11\x1f\x59\x0e\xa5\x1c\x4e\xc4\xf0\x62\x38\x11\x7f\x0b\xb8\x16\xf3\x89\xa8\x3e\xd1\xc2\xc7\x55\xda\xfb\x23\x59\x1f\xfe\x0d\x8f\x51\xa5\x6a\x5f\xcf\x39\xca\xf8\x89\x3a\x7e\xf6\xf4\x94\x03\xfa\x4d\x23\x52\x55\xfe\x2b\x62\xa4\xe8\x70\x9e\xcc\x7f\xe2\x48\x75\xb0\x3b\x4c\x0a\x35\x75\x55\x88\xf4\x0c\x76\xde\xcb\x3a\x10\x44\x0a\xad\x93\x3a\xee\x67\xf5\x17\x3e\x89\x7c\x9c\xd1\xb4\x2a\x5b\x5d\xb6\x8d\x50\x8d\x50\xdd\x81\xe5\xc8\x94\x4d\x0b\x63\xab\x5c\x74\xe7\xe2\xe3\x7e\x5e\x58\xdc\x83\xec\xf0\x97\x7e\x76\x10\xd6\x7d\xf4\x0e\x09\x1d\xef\xbd\xe1\x21\x7c\x4e\xce\x18\xc0\x36\xff\xb4\x6d\x5a\x76\xcc\x34\xa2\x30\x9f\xb4\xab\xcd\x64\xdb\x8a\x8d\x2a\x4d\xda\x88\xdb\x1b\x5d\xba\xd6\x5b\x2a\xa2\x2e\x70\xae\x00\xbb\xc2\x6c\xcc\x7a\x53\x98\xdc\xe8\x46\x34\x2a\xd7\xc2\x2d\x37\xcd\x17\xfa\x1d\x02\x1e\x5e\x17\x55\xa2\x0a\xf1\x59\xd5\x46\x25\x85\x6e\x9c\xa3\x7b\x1b\x8e\xdd\xe4\x68\xc0\xbb\x67\x5c\x7b\x5c\x1f\x64\xf1\x68\x48\x01\xbf\x74\x9d\x87\xe2\xaf\xfc\x43\xc3\x5f\xc5\x70\x7c\x29\x70\xab\xeb\x9a\xb3\x3a\x1a\x8f\x8f\xce\xcd\xd5\xc3\xa8\xb8\x6c\x1e\xc5\xc6\xb5\x9d\x15\x21\x08\xe3\x20\x7d\x9d\x08\x3d\x55\x0e\x8f\xce\xbe\x5d\xae\x8f\xc3\x3a\x3e\xaa\x52\x3a\xa8\x3f\x85\x3f\x44\x0e\xff\xd7\x20\x04\xab\x1e\x94\x7a\xef\xa7\x88\x7f\x32\x34\xa2\x10\xbf\x12\x91\x98\x0a\xcf\x02\xa4\x4e\xcd\x49\x50\x7a\xcb\xbf\xe1\xf4\xd3\xec\x7e\xd6\xa9\x38\x6f\xb9\x29\xb4\xb8\x35\xed\xcd\xc3\x7c\x1f\x27\x7b\x5f\xce\x67\xe4\xbb\xaf\xe5\x85\xbc\xb3\x79\x0f\x29\xe8\xe1\x0f\x4e\xff\x6f\xf3\xff\xc8\xd2\xfb\xdd\x13\x89\x72\x39\x78\x65\x45\x70\x20\x1f\xd5\xc4\x1f\x55\xfd\x5c\x95\x70\x8f\xe6\x90\x6a\xb1\x56\x1b\x22\xa5\xa2\x10\x9f\xca\xea\xb6\xa4\x12\x61\xb4\x68\x6f\xb4\xa9\x45\x7a\xa3\xd3\x4f\xcd\x76\xdd\x61\x94\x13\x81\xe5\xea\x5a\x6d\xde\x73\x42\x3e\x9c\xcc\xe2\x7a\x83\xf0\xae\xd5\x27\xfd\xc2\x90\x42\x97\xa3\x2e\x5f\x80\x6c\x00\x53\xe9\x32\x5f\xab\xf2\x5a\xef\xb3\xf9\x20\x75\xfb\x24\xa3\xf7\x87\x73\xe6\x31\x2d\x8f\x29\xf6\xeb\x0d\x8f\x12\x57\xfb\xf8\xf7\x43\xbf\xde\x3c\x5a\xd1\xa1\x80\x9a\xa3\x59\x56\x52\x4b\xd5\x9b\x2c\x4d\xbf\xf0\x69\xc0\x08\x54\x77\x00\x71\x1e\xd2\xc5\xa5\x7b\x32\x11\xfe\x1f\x0e\x03\x4b\xba\x12\x6a\xb3\xd1\x65\x46\x53\xa2\xe9\xd2\xde\xc7\x15\xb4\x3b\x37\xf6\xe3\x0d\x6a\xa0\x05\x07\x4d\xc4\x4d\x55\x64\x30\x4e\xab\xf4\xc6\xcd\x78\xf7\x0a\x44\x55\x4f\x50\x28\x1b\x9d\x89\xb6\x12\xa6\x6d\x1c\x49\xd0\xf9\x47\x27\x0a\x9e\xec\x93\x0b\xdf\x1f\xef\x68\xee\xbd\xb3\x7e\xf1\xb9\x7c\xf9\x17\x9a\x89\x77\x52\x94\x3b\xf3\x3a\x25\xc8\x9d\x0c\x7a\xfb\x2d\xd9\xa5\x70\xbb\xb4\x23\x40\xad\x8f\xf2\x4c\xf8\xc9\xf1\x4e\x74\x51\xdd\x0a\x25\x52\x5d\xb7\xca\x10\x64\x66\xa6\xd6\x69\x5b\xd5\x77\x42\xaf\x13\x9d\x65\x3a\x13\xa6\x3c\x8c\x3b\x7e\x8b\x04\x03\x7e\xa8\x6a\xa1\xad\x5a\x6f\x0a\x0d\xa4\xbd\xab\xb6\xa2\xde\x96\xbd\x5e\xa2\x2a\x05\xfe\x5f\x4c\xa7\x53\x9a\x93\xd4\x88\x25\xa6\x32\x6c\x12\xc4\xe4\x55\x51\x54\xb7\x48\xdd\x8d\xd1\xb5\xaa\xd3\x9b\x3b\x7a\x17\x05\x7f\x34\xba\xbb\x11\x22\xaf\xaa\x69\x6b\xdb\x43\x83\x59\x5f\xf7\x1e\x0b\xa1\xa6\x9b\xf2\xba\xdf\x90\x74\x0d\xed\x7e\xf5\xf3\xd6\xd4\xa3\x21\x04\x0f\xc7\xc7\x0b\xa1\xae\x8a\xef\x87\x4e\x0f\x50\xd9\xac\xaf\x87\xbb\x49\x3f\xa4\x3c\xf8\x02\x0f\x9e\x15\x40\x76\x60\x38\xe9\x7f\x24\xa0\x93\x3f\xa6\xa8\x1c\xda\xcb\xaa\xd5\xd6\x34\xed\x43\xc1\xdd\x02\x66\x82\xfe\xc7\xa2\xd0\xd5\x14\xc5\x63\x13\xc8\xc3\xdd\x31\x81\xd5\x8f\x36\x50\x8f\x17\xe9\x65\x95\xe9\x0e\x94\xda\x5a\x6b\xe2\x23\xcc\x69\x9a\x92\x40\x24\x9f\xe6\xed\x2b\xc9\x6d\xb0\x51\xed\xcd\x7f\x9a\xa6\xed\x0f\xf9\x65\x53\x98\x76\x74\x24\x91\xc6\xa0\x3f\xe0\xe3\xe3\x44\x6c\x0e\xf0\xb1\x97\x40\xb0\x48\xf6\x5e\x09\xfc\x9b\xbe\xb9\x31\x45\x56\xeb\xf2\xfd\xe6\x03\x1e\x99\x5c\xf0\xd3\x1e\x8a\xbe\x66\xe3\x34\x60\xa8\xdd\x75\x6f\xb9\x90\xae\x1f\x10\xd7\x33\x5e\x99\x39\x25\x17\xf0\xf6\xf9\x79\x14\x3d\xf2\xa9\x83\xd2\x14\xf7\xef\x8e\xf0\xf4\xa8\x1f\x1b\xf3\xf9\x80\xa8\xf5\xe7\xc9\x61\xd0\x11\xa6\xe2\x49\xff\xbd\x1b\x97\xf1\xde\xbb\x31\xe4\x24\xcd\xbc\x27\x11\xd1\x1b\xec\xb5\xf6\xd0\xf3\x2f\x5d\xe5\x74\x67\xcc\x9d\xdc\x2b\xf1\xad\xfb\x7a\x4f\x61\x7a\x62\xcc\xd9\x18\xbb\x97\xf4\x32\xd8\x3e\xa9\x67\xb7\x9b\x9c\x87\xc1\xe2\x1c\x55\x0c\xc7\x27\x14\xed\x51\xfa\xd4\xdf\x5e\x11\x43\xf9\xb3\xe2\x76\x8c\xf1\x3f\xeb\xa6\xad\x6a\xcd\x05\x56\xf3\x0d\x6d\x76\x98\xfd\xb6\x65\xa6\xfb\x3b\xa3\x3d\xbe\x3b\x4c\xe8\x0f\x1f\x65\xa6\x7e\xf0\xa6\x1b\xaf\xa0\x4f\xee\xda\x9f\x3d\xc2\x73\xa7\x77\x03\xd3\x6d\x88\xf6\x43\xf7\x9b\xa7\x73\x86\xf3\x6b\x6c\x55\x33\xfd\xe9\x53\x66\xea\xbf\x17\xc5\xe8\x23\xa8\xe8\xbf\x54\x7b\xc3\x06\x77\x2f\xf6\x4d\x3b\x68\x1b\x8f\x27\xc7\x07\x7f\xcb\x30\x3c\xf9\xc6\xdd\xb1\x2a\x7e\x7b\x70\xfa\xdf\xb5\x69\x35\x64\x3c\xd4\x47\x2a\x26\x82\x23\x02\xe7\xa6\xfc\x8a\xd5\x39\x1a\xdc\x6d\xd5\x4c\xdf\xdc\xb4\x06\x2b\xaa\xa7\x85\x77\x62\xf9\xc5\xab\x87\xf7\xdd\x52\xb8\x9f\xbc\xe6\x8f\x24\x5f\xd4\x3a\xdd\xd6\x8d\xf9\xac\x8b\xa7\x0a\xa1\x39\x55\x09\xa9\x9b\xec\xc7\x29\xdd\xc7\xde\x1b\x60\x51\x60\x0a\x7d\x22\x1a\x4f\x17\x1d\xa3\x12\xad\xf0\x6b\xaf\x43\x7c\xd2\x76\x00\xb9\xb4\x8f\x6f\x9c\xae\x27\x0c\xdf\x57\xc4\x7f\x54\xa6\x74\x14\x44\x23\xc7\xa7\x57\xd5\xfb\x05\xf5\xee\xe1\x2b\x66\xfc\x83\xea\xe3\x54\x3d\x71\xb2\xf1\x4a\x4a\xdc\xbf\x4e\xd7\x37\xdd\x81\xf7\x9e\xcf\x33\x53\xef\x26\x2f\x13\xe6\x74\x3a\xa5\x8f\xb7\xf3\xfe\x27\x00\x00\xff\xff\x41\xbf\xe1\xfc\x09\x2c\x00\x00")

func migrationsGoBytes() ([]byte, error) {
	return bindataRead(
		_migrationsGo,
		"migrations.go",
	)
}

func migrationsGo() (*asset, error) {
	bytes, err := migrationsGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations.go", size: 11273, mode: os.FileMode(0644), modTime: time.Unix(1593602510, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6b, 0x83, 0x2c, 0xbb, 0xac, 0x96, 0x69, 0x5a, 0x31, 0x48, 0x61, 0x53, 0x7b, 0x99, 0xa9, 0x36, 0xf0, 0x37, 0x76, 0x87, 0xdb, 0x26, 0x11, 0xb9, 0x25, 0x60, 0x74, 0xef, 0x25, 0xb, 0x5d, 0xf4}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1593601728_initial_schema.down.sql": _1593601728_initial_schemaDownSql,

	"1593601728_initial_schema.up.sql": _1593601728_initial_schemaUpSql,

	"doc.go": docGo,

	"migrations.go": migrationsGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"1593601728_initial_schema.down.sql": &bintree{_1593601728_initial_schemaDownSql, map[string]*bintree{}},
	"1593601728_initial_schema.up.sql":   &bintree{_1593601728_initial_schemaUpSql, map[string]*bintree{}},
	"doc.go":                             &bintree{docGo, map[string]*bintree{}},
	"migrations.go":                      &bintree{migrationsGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
